module natOld

import bool

data nat = O | S nat

|||returns true if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero (S _) = false

|||returns the successor of any given nat
succ: nat -> nat
succ n = S n

|||returns the predecessor of any given nat
pred: nat -> nat
pred O = O
pred (S n) =  n

|||returns true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n

addp: pair nat nat -> nat
addp (mkPair O m) = m
addp (mkPair (S n) m) = S (addp (mkPair n m))

multp: pair nat nat -> nat
multp (mkPair O m) = O
multp (mkPair (S n) m) = addp (mkPair (multp (mkPair n m)) m)

factp: nat -> nat
factp O = S O
factp (S n') = multp (mkPair (S n') (factp n'))

subp: pair nat nat -> nat
subp (mkPair O m) = O
subp (mkPair n O) = n
subp (mkPair (S n) (S m)) = subp (mkPair n m)

exp: pair nat nat -> nat
exp (mkPair x O) = S O
exp (mkPair x (S n)) = (multp (mkPair x (exp (mkPair x (S n)))))

lep: pair nat nat -> bool
lep (mkPair O O) = true
lep (mkPair O m) = true
lep (mkPair (S n) O) = false
lep (mkPair (S n) (S m)) = lep (mkPair n m)

eqp: pair nat nat -> bool
eqp (mkPair O O) = true
eqp (mkPair O m) = false
eqp (mkPair n O) = false
eqp (mkPair (S n) (S m)) = eqp (mkPair n m)

gtp: pair nat nat -> bool
gtp (mkPair O O) = false
gtp (mkPair m O) = true
gtp (mkPair O n) = false
gtp (mkPair (S n) (S m)) = gtp (mkPair n m)

gep: pair nat nat -> bool
gep (mkPair m O) = true
gep (mkPair O n) = false
gep (mkPair O O) = true
gep (mkPair (S n) (S m)) = gep (mkPair n m)

ltp: pair nat nat -> bool
ltp (mkPair O m) = true
ltp (mkPair n O) = false
ltp (mkPair O O) = false
ltp (mkPair (S n) (S m)) = ltp (mkPair n m)